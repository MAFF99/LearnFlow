%pip -q install google-genai


# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')


# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"


# Instalar Framework de agentes do Google ################################################
!pip install -q google-adk


# -*- coding: utf-8 -*-
# %%
from IPython import get_ipython
from IPython.display import display
# %%
%pip -q install google-genai
# %%
# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')
# %%
# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"
# %%
# Instalar Framework de agentes do Google ################################################
!pip install -q google-adk
# %%
from IPython import get_ipython
from IPython.display import display, HTML, Markdown
import os
from google.colab import userdata
from google import genai
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types
from datetime import date
import textwrap
import requests
import warnings

warnings.filterwarnings("ignore")

# Configura a API Key do Google Gemini
os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini
client = genai.Client()
MODEL_ID = "gemini-2.0-flash"

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    session_service = InMemorySessionService()
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

#################################################
# --- Agente 1: Defini√ß√£o de Objetivo (O Farol) ---
#################################################
def agente_farol():
    farol = Agent(
        name="agente_farol",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© o Agente de Defini√ß√£o de Objetivo, conhecido como 'O Farol'.
        Sua fun√ß√£o √© guiar o usu√°rio na defini√ß√£o de um objetivo de aprendizado claro e espec√≠fico.
        1. Comece coletando a inten√ß√£o inicial do usu√°rio.
        2. Fa√ßa de 3 a 5 perguntas direcionadas para refinar o objetivo. As perguntas devem ajudar a especificar a √°rea de interesse, o objetivo pr√°tico e o n√≠vel de experi√™ncia do usu√°rio.
        3. Ao final, sintetize as respostas do usu√°rio em uma declara√ß√£o clara e espec√≠fica do objetivo de aprendizado.
        4. Transmita este objetivo refinado para o pr√≥ximo agente.
        """,
        description="Agente que guia o usu√°rio na defini√ß√£o de um objetivo de aprendizado.",
        # Este agente n√£o precisa de ferramentas externas para esta fase inicial
    )

    print("Ol√°! Eu sou O Farol. Qual o seu objetivo de aprendizado inicial?")
    intencao_inicial = input("Sua inten√ß√£o inicial: ")

    # TODO: Implementar a l√≥gica interativa para fazer as perguntas e coletar respostas
    # Por enquanto, usando simula√ß√£o para demonstra√ß√£o
    print("\nPara refinar seu objetivo, vou fazer algumas perguntas:")
    area_interesse = input("Em qual √°rea voc√™ tem mais interesse? ")
    objetivo_especifico = input("Qual seu objetivo espec√≠fico (hobby, profissional, etc.)? ")
    nivel_experiencia = input("Qual seu n√≠vel de experi√™ncia atual? ")

    # Sintetiza o objetivo refinado com base nas respostas (simuladas)
    objetivo_refinado = f"O usu√°rio quer aprender sobre {intencao_inicial}, com foco em {area_interesse}, para {objetivo_especifico}, considerando que ele √© um {nivel_experiencia}."
    print(f"\nSeu objetivo refinado √©: {objetivo_refinado}")

    # Em uma implementa√ß√£o real, voc√™ pode chamar o call_agent aqui se quiser
    # que o agente sintetize o objetivo com base nas entradas brutas do usu√°rio.
    # Mas para esta fun√ß√£o simples, construir a string diretamente √© suficiente.

    return objetivo_refinado

######################################
# --- Agente 2: Agente Pesquisador ---
######################################
def agente_pesquisador(objetivo_aprendizado):
    pesquisador = Agent(
        name="agente_pesquisador",
        model="gemini-2.0-flash",
        instruction=f"""
        Voc√™ √© o Agente Pesquisador.
        Sua tarefa √© receber o objetivo de aprendizado espec√≠fico: '{objetivo_aprendizado}', e realizar buscas abrangentes online para encontrar conte√∫dos gratuitos relevantes para iniciantes.
        Utilize a ferramenta de busca do Google (google_search) para encontrar artigos, v√≠deos, tutoriais e outros recursos, **priorizando a inclus√£o de v√≠deos do YouTube quando relevantes e de boa qualidade.**

        Ap√≥s a busca:
        1. Filtre e pr√©-selecione conte√∫dos que pare√ßam introdut√≥rios e bem avaliados para o n√≠vel do usu√°rio, removendo resultados irrelevantes ou de baixa qualidade aparente com base nas informa√ß√µes da busca (t√≠tulos, snippets). **Inclua v√≠deos do YouTube que sejam tutoriais ou explica√ß√µes claras para iniciantes.**
        2. Organize os conte√∫dos pr√©-selecionados em uma sequ√™ncia linear inicial, tentando identificar uma ordem l√≥gica (do b√°sico ao mais avan√ßado dentro do t√≥pico).
        3. Apresente a lista organizada de conte√∫dos em um formato claro e consistente, **incluindo o t√≠tulo do recurso e o link (URL completa) para cada item**. Use o formato "- T√≠tulo do Recurso: [Link do Recurso]". **Certifique-se que o link seja a URL completa e clic√°vel.**

        Priorize materiais introdut√≥rios e bem avaliados para iniciantes no seu objetivo de aprendizado.
        """,
        description="Agente que busca, filtra e organiza conte√∫dos online com base em um objetivo de aprendizado.",
        tools=[google_search]
    )

    entrada_pesquisador = f"Busque por conte√∫dos online sobre: {objetivo_aprendizado}. Priorize recursos para iniciantes, **incluindo v√≠deos do YouTube**. Filtre e organize os resultados em uma sequ√™ncia de aprendizado l√≥gico, **apresentando cada recurso com seu t√≠tulo e o link completo no formato: - T√≠tulo: [Link]**."
    lista_links_organizada = call_agent(pesquisador, entrada_pesquisador)

    return lista_links_organizada

#############################################
# --- Agente 3: Agente de Estrutura (O Arquiteto) ---
#############################################
def agente_arquiteto(lista_conteudos_organizada):
    arquiteto = Agent(
        name="agente_arquiteto",
        model="gemini-2.0-flash",
        instruction=f"""
        Voc√™ √© o Agente de Estrutura, conhecido como 'O Arquiteto'.
        Sua tarefa √© receber uma lista organizada de conte√∫dos no formato "- T√≠tulo: [Link]":
        ---
        {lista_conteudos_organizada}
        ---

        Com base nesta lista e no objetivo de aprendizado do usu√°rio, voc√™ deve:
        1. Avaliar a qualidade, relev√¢ncia e coer√™ncia dos conte√∫dos **utilizando as informa√ß√µes do t√≠tulo e link fornecidos**. Voc√™ pode usar a ferramenta de busca (google_search) para obter mais contexto sobre os t√≥picos ou fontes, se necess√°rio.
        2. Refinar a estrutura de aprendizado, reordenando os conte√∫dos se necess√°rio para garantir uma progress√£o l√≥gica e suave do conhecimento.
        3. Criar um cronograma b√°sico de estudos, sugerindo uma estimativa de tempo para cada etapa ou agrupando conte√∫dos por "semanas" ou "m√≥dulos".
        4. Apresentar a estrutura de aprendizado refinada e o cronograma de forma clara e acess√≠vel. **Para cada item no plano, liste o t√≠tulo e o link original (URL completa) fornecido na lista de entrada.** Mantenha o formato "- T√≠tulo do Recurso: [Link do Recurso]".

        Foque em criar um plano de estudos pr√°tico e f√°cil de seguir para o usu√°rio, **garantindo que os links dos recursos de aprendizado estejam presentes na apresenta√ß√£o final no formato especificado.**
        """,
        description="Agente que avalia, refina a estrutura e cria um cronograma de estudos com base em conte√∫dos encontrados.",
        tools=[google_search]
    )

    entrada_arquiteto = f"""
Avalie e refine a estrutura de aprendizado com base nesta lista de conte√∫dos.
A lista de entrada est√° no formato "- T√≠tulo: [Link]".
Sua tarefa √© criar um plano de estudos e cronograma, **e para cada item no plano, voc√™ DEVE incluir o t√≠tulo do recurso e o link original fornecido na lista de entrada, mantendo o formato "- T√≠tulo: [Link]".**

Lista de conte√∫dos organizada:
{lista_conteudos_organizada}

Crie um cronograma de estudos para o usu√°rio, listando os conte√∫dos na ordem recomendada e **incluindo o link completo para cada um no formato "- T√≠tulo: [Link]"**.
"""
    estrutura_e_cronograma = call_agent(arquiteto, entrada_arquiteto)

    return estrutura_e_cronograma

# --- Orquestra√ß√£o do Sistema de Aprendizado ---
print("üöÄ Iniciando o Sistema de Aprendizado Interativo üöÄ")

# 1. Executa o Agente Farol para definir o objetivo
print("\n--- üéØ Executando O Farol (Defini√ß√£o de Objetivo) ---")
objetivo_do_usuario = agente_farol()
print(f"\nObjetivo final definido: {objetivo_do_usuario}")
print("--------------------------------------------------------------")

# 2. Executa o Agente Pesquisador com o objetivo refinado
print("\n--- üîç Executando o Agente Pesquisador ---")
resultados_pesquisa_organizados = agente_pesquisador(objetivo_do_usuario)
print("\n--- üìù Resultado do Agente Pesquisador (Links Encontrados e Organizados) ---\n")
display(to_markdown(resultados_pesquisa_organizados))
print("--------------------------------------------------------------")

# 3. Executa o Agente Arquiteto com a lista de conte√∫dos organizada
print("\n--- üèóÔ∏è Executando O Arquiteto (Estrutura e Cronograma) ---")
estrutura_e_cronograma = agente_arquiteto(resultados_pesquisa_organizados)
print("\n--- üìù Resultado do Agente Arquiteto (Estrutura e Cronograma) ---\n")
display(to_markdown(estrutura_e_cronograma))
print("--------------------------------------------------------------")

print("\n‚úÖ Sistema de Aprendizado Interativo Conclu√≠do! Voc√™ recebeu seu plano de estudos e recursos.")
